const express = require('express')
const _ = require("lodash")
const bodyParser = require('body-parser')
const CryptoJS = require("crypto-js");
const crypto = require("crypto");


const app = express()
port = 3000
app.use(bodyParser.urlencoded({ extended: false }))
app.use(bodyParser.json())


let algo = _.toString('prime256v1');

app.get('/generate-keys', (req, res) => {


    if(algo.length == 0){
        return res.send({status:false,message:'no algorithm specified',data:{}})
    }
    const client = crypto.createECDH(algo);

    if(!(client instanceof crypto.ECDH)){
        return res.send({status:false,message:'invalid client generated by crypto lib',data:{}})
    }

    client.generateKeys();

    const clientPrivateKey = _.toString(client.getPrivateKey('hex'));
    if(clientPrivateKey.length == 0){
        return res.send({status:false,message:'invalid private key generated',data:{}})
    }

    const clientPublicKey = _.toString(client.getPublicKey('hex'));
    if(clientPublicKey.length == 0){
        return res.send({status:false,message:'invalid public key generated',data:{}})
    }

    res.send({
        status:true,
        message:'successfully generated key',
        data:{
            'public':clientPublicKey,
            'private':clientPrivateKey
        }
        
    })
})



app.post('/generate-secret', (req, res) => {
    let privateKey =  _.toString(req.body?.clientPtKey)
    let publicKey = _.toString(req.body?.clientPubKey)
    let ServerKey = _.toString(req.body?.serverPubKey)
    
    if(privateKey.length == 0 || publicKey.length==0 || ServerKey.length==0){
        return res.send({status:false,message:'invalid parameters passed',data:{}})
    }

    if(algo.length == 0){
        return res.send({status:false,message:'no algorithm specified',data:{}})
    }

    const clientEDCH = crypto.createECDH(algo);
    clientEDCH.setPrivateKey(privateKey, 'hex');
    clientEDCH.setPublicKey(publicKey,'hex')

    let sharedSec = _.toString(clientEDCH.computeSecret(ServerKey, 'hex', 'hex'));

    if(sharedSec.length == 0){
        return res.send({status:false,message:'no shared key generated',data:{}})
    }

    const key = CryptoJS.enc.Hex.parse(sharedSec);
    const iv = CryptoJS.enc.Hex.parse("000000000000000000000000000000000");
    const payloadRequest = req.body.request

    const encryptedRequest = _.toString(CryptoJS.AES.encrypt(JSON.stringify(payloadRequest), key, { iv }).toString());

    if(encryptedRequest.length==0){
        return res.send({status:false,message:'invalid encrypted key generated',data:{}})
    }

    return res.send({
        'encryptedRequest' : encryptedRequest,
        'sharedSecret':sharedSec,
        'iv':"00000000000000000000000000000000"
    })
})

app.get("*", (req, res) => { 
    res.send({status:false,message:'SERVICE UNAVAILABLE',data:{}})
 }); 

app.post("*", (req, res) => { 
res.send({status:false,message:'SERVICE UNAVAILABLE',data:{}})
}); 
    


app.listen(port, () => {
  console.log(`app listening on port ${port}`)
})